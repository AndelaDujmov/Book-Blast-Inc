@page
@using BookBlastInc.DataAccess.Migrations
@using OrderStatus = BookBlastInc.Core.Enums.OrderStatus
@model BookBlastInc.Web.Pages.ShoppingCartPages.OrderManagement

@{
    var status = HttpContext.Request.Query["status"];
    var pending = "text-secondary";
    var completed = "text-secondary";
    var cancelled = "text-secondary";
    var all = "text-secondary";

    switch (status)
    {
        case "pending":
            pending = "active text-white bg-secondary";
            break;
        case "completed":
            completed = "active text-white bg-secondary";
            break;
        case "cancelled":
            cancelled = "active text-white bg-secondary";
            break;
        default:
            all = "active text-white bg-secondary";
            break;
    }
}


<div class="card-body p-3">
    <div class="d-flex justify-content-between pb-5 pt-2">
       <span></span>
       <ul class="list-group list-group-horizontal-sm">
           <a style="text-decoration:none" asp-page-handler="status" asp-route-status="pending">
               <li class="list-group-item @pending">In Process</li>
           </a>
           <a style="text-decoration:none;" asp-page-handler="status" asp-route-status="completed">
           <li class="list-group-item @completed">Completed</li>
           </a>
           <a style="text-decoration:none;" asp-page-handler="status" asp-route-status="cancelled">
           <li class="list-group-item @cancelled">Cancelled</li>
           </a>
           <a style="text-decoration:none; "  asp-page-handler="status" asp-route-status="">
           <li class="list-group-item @all">All</li>
           </a>
       </ul>
    </div>
    <form method="post">
        <div class="border p-3  mt-4">
            <div class="row pb-2">
                <h2 class="text-primary">Orders</h2>
                <hr/>
            </div>
            @if (!@Model.Orders.Equals(null))
            {
                <table class="table text-secondary table-bordered">
                    <thead class="thead-dark text-secondary" style="background-color: lightblue; text-overline-color: white; color: white">
                    <th>ID</th>
                    <th><a asp-page="OrderManagement" asp-route-sortOrder="@ViewData["NameSortParm"]">Name</a></th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th>Status</th>
                    <th>Total</th>
                    <th></th>
                    <th></th>
                    </thead>
                    <tbody>
                    @foreach (var element in @Model.Orders)
                    {
                        <tr>
                            <td>@element.Id</td>
                            <td>@element.Name</td> &nbsp;&nbsp;&nbsp;
                            <td>@element.PhoneNumber</td>
                            <td>@element.User.Email</td>
                            <td>@element.OrderStatus.ToString()</td>
                            <td>@string.Format("â‚¬{0:N2}", element.Total)</td>
                            <td>
                                <a asp-page="/ShoppingCartPages/OrderDetails" asp-route-id="@element.Id" class="btn btn-secondary">
                                    <i class="bi bi-pencil-fill"></i> &nbsp; 
                                </a>
                            </td>
                            <td>
                                 <a asp-page-handler="InvoiceGeneration" asp-route-id="@element.Id" class="btn btn-secondary">
                                    Receipt &nbsp; 
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                <p>No previous records of test results.</p>
            }
        </div>

        <a>Back to home</a>
    </form>
</div>

@{
    var prev = !Model.PaginatedOrders.HasPreviousPage ? "disabled" : "";
    var next = !Model.PaginatedOrders.HasNextPage ? "disabled" : "";
}

<a 
    asp-route-sortOrder="@Model.CurrentSort"
    asp-route-pageIndex="@(Model.PaginatedOrders.PageIndex - 1)" 
    class="btn btn-primary @prev">
    Previous
</a>
<a asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.PaginatedOrders.PageIndex + 1)"
   class="btn btn-primary @next">
    Next
</a> &nbsp; &nbsp; @(Model.PaginatedOrders.PageIndex)/@(Model.PaginatedOrders.TotalPages)